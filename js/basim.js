'use strict';

const HTML_CANVAS = "basimcanvas";
const HTML_RUNNER_MOVEMENTS = "runnermovements";
const HTML_RUNNER_SPAWNS = "runnerspawns";
const HTML_HEALER_SPAWNS = "healerspawns";
const HTML_ENABLE_HEALERS = "enablehealers";
const HTML_ENABLE_RENDER = "enablerender";
const HTML_ENABLE_MARKER = "enablemarker";
const HTML_CLEAR_MARKERS = "clearmarkers";
const HTML_SAVE_BUTTON = "savestate";
const HTML_LOAD_BUTTON = "loadstate";
const HTML_START_BUTTON = "wavestart";
const HTML_PAUSE_BUTTON = "wavepause";
const HTML_STEP_BUTTON = "wavestep";
const HTML_STEP_BACKWARD_BUTTON = "wavestepback";
const HTML_WAVE_SELECT = "waveselect";
const HTML_TICK_COUNT = "tickcount";
const HTML_DEF_LEVEL_SELECT = "deflevelselect";
const HTML_RUNNER_TABLE = "runnertable";
const HTML_HEALER_TABLE = "healertable";

var state = {};
var markedTiles = [];

var stateHistory = new (function() {
	const STATE_LIMIT = 1000;
	this.states = [];
	this.index = -1;
	this.pushState = function (state) {
		this.states.splice(++this.index, Infinity, state);
		if (this.states.length > STATE_LIMIT) {
			this.states.shift();
			--this.index;
		}
	};
	this.current = function() {
		return this.states[this.index];
	}
	this.peek = function() {
		return this.states[this.index + 1];
	}
	this.forward = function() {
		let index = this.index + 1;
		if (index >= this.states.length) {
			index = this.states.length - 1;
		}
		this.index = index;
		return this.states[index];
	};
	this.backward = function() {
		let index = this.index - 1;
		if (index < 0) {
			index = -1;
		}
		this.index = index;
		return this.states[index];
	};
})();

//{ BaArena - ba
const baWEST_TRAP_X = 15;
const baWEST_TRAP_Y = 25;
const baEAST_TRAP_X = 45;
const baEAST_TRAP_Y = 26;
const baWAVE1_NORTH_LOG_X = 28;
const baWAVE1_NORTH_LOG_Y = 39;
const baWAVE10_NORTH_LOG_X = 29;
const baWAVE10_NORTH_LOG_Y = 39;
const baWAVE1_SOUTH_LOG_X = 29;
const baWAVE1_SOUTH_LOG_Y = 38;
const baWAVE10_SOUTH_LOG_X = 30;
const baWAVE10_SOUTH_LOG_Y = 38;
const baWAVE1_RUNNER_SPAWN_X = 36;
const baWAVE1_RUNNER_SPAWN_Y = 39;
const baWAVE10_RUNNER_SPAWN_X = 42;
const baWAVE10_RUNNER_SPAWN_Y = 38;
const baWAVE1_NPC_HEALER_SPAWN_X = 42;
const baWAVE1_NPC_HEALER_SPAWN_Y = 37;
const baWAVE10_NPC_HEALER_SPAWN_X = 36;
const baWAVE10_NPC_HEALER_SPAWN_Y = 39;
const baWAVE1_DEFENDER_SPAWN_X = 33;
const baWAVE1_DEFENDER_SPAWN_Y = 8;
const baWAVE10_DEFENDER_SPAWN_X = 28;
const baWAVE10_DEFENDER_SPAWN_Y = 8;
const baWAVE1_PLAYER_HEALER_SPAWN_X = 32;
const baWAVE1_PLAYER_HEALER_SPAWN_Y = 9;
const baWAVE10_PLAYER_HEALER_SPAWN_X = 31;
const baWAVE10_PLAYER_HEALER_SPAWN_Y = 9;
const baWAVE1_MAIN_SPAWN_X = 31;
const baWAVE1_MAIN_SPAWN_Y = 10;
const baWAVE10_MAIN_SPAWN_X = 30;
const baWAVE10_MAIN_SPAWN_Y = 10;
const baWAVE1_2A_SPAWN_X = 30;
const baWAVE1_2A_SPAWN_Y = 9;
const baWAVE10_2A_SPAWN_X = 29;
const baWAVE10_2A_SPAWN_Y = 9;
const baWAVE1_COLLECTOR_SPAWN_X = 29;
const baWAVE1_COLLECTOR_SPAWN_Y = 8;
const baWAVE10_COLLECTOR_SPAWN_X = 32;
const baWAVE10_COLLECTOR_SPAWN_Y = 8;

//{ RunnerRNG - rng
const rngSOUTH = 0;
const rngWEST = 1;
const rngEAST = 2;

//{ Renderer - r
const rPIXEL_ALPHA = 255 << 24;

//{ Map - m
const mWAVE_1_TO_9 = [16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097156, 2097154, 2097154, 2097154, 2097154, 2228480, 2228480, 2228480, 2228480, 2097154, 2097154, 2097154, 2097154, 2097153, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2097156, 2097408, 96, 2097440, 2097440, 32, 0, 0, 0, 0, 131360, 131360, 131360, 131376, 2097408, 2097153, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 131328, 131328, 131328, 2228480, 2097156, 2097154, 2097154, 2097408, 64, 0, 2097408, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2097408, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097153, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 131328, 2228480, 2097156, 2097154, 2097154, 2097408, 352, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 131362, 131386, 2228608, 131328, 0, 0, 2228480, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 131328, 131328, 2097156, 2097408, 96, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 131328, 131328, 2097160, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 131328, 2097156, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 131328, 2097156, 2097408, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 131328, 131328, 0, 0, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097160, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131360, 131368, 2097538, 0, 131328, 0, 0, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131368, 2097280, 0, 131328, 131328, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2228480, 2097156, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131336, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 131328, 2097156, 2097408, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2097160, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 131328, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 131328, 2097160, 128, 0, 0, 0, 0, 0, 4104, 65664, 0, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 65664, 0, 4104, 65664, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 131328, 2097160, 129, 0, 0, 0, 0, 0, 5130, 65664, 0, 4104, 66690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5130, 65664, 0, 4104, 66690, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 2097168, 2097408, 0, 0, 0, 0, 4104, 2310560, 0, 0, 0, 2249000, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 2310560, 0, 0, 0, 2249000, 65664, 0, 0, 0, 0, 8, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 0, 0, 0, 4104, 65664, 0, 0, 0, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 65664, 0, 0, 0, 4104, 65664, 0, 0, 0, 0, 12, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2228480, 2097156, 2097408, 0, 0, 0, 0, 4104, 65664, 0, 262144, 131328, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 65664, 0, 262144, 131328, 4104, 65664, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2097156, 2097408, 64, 0, 0, 0, 0, 4104, 2295170, 1026, 1026, 1026, 2233610, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 2295170, 1026, 1026, 1026, 2233610, 65664, 0, 0, 0, 2097408, 2097216, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2097160, 192, 0, 0, 0, 0, 0, 0, 16416, 16416, 16416, 16416, 16416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16416, 16416, 16416, 16416, 16416, 0, 0, 0, 8, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2097160, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2097168, 2097408, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097408, 2097153, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 2097280, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2228480, 131328, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2228480, 2097160, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097408, 2097216, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2228480, 2097168, 2097408, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 2097280, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 2097408, 2097216, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2228480, 2228480, 2228480, 2097184, 2097184, 2097408, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 2097408, 2097184, 2097184, 2228480, 2228480, 2228480, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097168, 2228480, 2228480, 2228480, 2097184, 2097184, 2097408, 3, 2, 6, 2097408, 2097184, 2097184, 2228480, 2228480, 2228480, 2097216, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097168, 2097184, 2097184, 2097184, 2097216, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216, 16777216];
const mWAVE10 = [2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097156, 2097154, 2097154, 2097154, 2097154, 2228480, 2228480, 2228480, 2228480, 2097154, 2097154, 2097154, 2097154, 2228481, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097156, 2097408, 96, 2097440, 2097440, 32, 0, 0, 0, 0, 131360, 131360, 131360, 131376, 2097408, 2228481, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 131328, 131328, 131328, 2228480, 2097156, 2097154, 2097154, 2097408, 64, 0, 2097408, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2097408, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097154, 2097153, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 131328, 2097156, 2097154, 2097154, 2097154, 2097408, 352, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 131362, 131386, 2097280, 131328, 0, 0, 131328, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097156, 2097408, 96, 131360, 32, 0, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 131328, 131328, 0, 131328, 0, 0, 0, 0, 32, 32, 0, 0, 0, 0, 0, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 131328, 2097156, 2097408, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097160, 192, 131328, 0, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097156, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 0, 0, 0, 2, 2, 0, 131328, 131328, 0, 0, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097156, 2097408, 64, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 131360, 131368, 2097538, 0, 131328, 0, 0, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 192, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131368, 2097280, 0, 131328, 131328, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097160, 128, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131336, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097156, 2097408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 0, 0, 2097408, 2097153, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097156, 2097408, 131392, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 131328, 131328, 0, 16, 2097408, 2097153, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097156, 2097408, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 0, 0, 24, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097160, 192, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 8, 2097280, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 0, 0, 2097408, 2097153, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2097408, 2097153, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097156, 2097408, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 4104, 65664, 0, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 24, 2097280, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097160, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5130, 65664, 0, 4104, 66690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 8, 2097280, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097160, 128, 131328, 131328, 0, 0, 0, 0, 0, 0, 4104, 2179488, 0, 0, 0, 2117928, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 131340, 2097280, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097160, 129, 131328, 131328, 0, 0, 0, 0, 0, 0, 4104, 65664, 0, 0, 0, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097408, 2097216, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 0, 0, 0, 131328, 0, 0, 0, 0, 4104, 65664, 0, 262144, 131328, 4104, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 8, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 128, 0, 131328, 0, 0, 0, 0, 0, 4104, 2164098, 1026, 1026, 1026, 2102538, 65664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 2097280, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 129, 0, 0, 0, 0, 0, 0, 0, 0, 16416, 16416, 16416, 16416, 16416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 0, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 1, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 12, 2097280, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097168, 2097408, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097160, 129, 0, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 0, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097168, 2097408, 1, 131328, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 0, 12, 2097280, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097168, 2097408, 0, 0, 0, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 131328, 4, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097160, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097160, 129, 0, 131328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131328, 12, 2097280, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2097168, 2097408, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2097168, 2097408, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2097408, 2097216, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097168, 2097408, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 2097408, 2097216, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2097168, 2228480, 2228480, 2228480, 2097184, 2097184, 2097408, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 0, 0, 4, 2097408, 2097184, 2097184, 2228480, 2228480, 2228480, 2097216, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097168, 2228480, 2228480, 2228480, 2097184, 2097184, 2097408, 3, 2, 6, 2097408, 2097184, 2097184, 2228480, 2228480, 2228480, 2097216, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097168, 2097184, 2097184, 2097184, 2097216, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2228480, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152, 2097152];
const mLOS_FULL_MASK = 0x20000;
const mLOS_EAST_MASK = 0x1000;
const mLOS_WEST_MASK = 0x10000;
const mLOS_NORTH_MASK = 0x400;
const mLOS_SOUTH_MASK = 0x4000;
const mMOVE_FULL_MASK = 0x100 | 0x200000 | 0x40000 | 0x1000000; // 0x100 for objects, 0x200000 for unwalkable tiles such as water etc, 0x40000 is very rare but BA cannon has it. 0x1000000 is not confirmed to block move but outside ba arena 1-9.
const mMOVE_EAST_MASK = 0x8;
const mMOVE_WEST_MASK = 0x80;
const mMOVE_NORTH_MASK = 0x2;
const mMOVE_SOUTH_MASK = 0x20;

// console.dir(window);
window.onload = simInit;
//{ Simulation - sim
function simInit() {
	let canvas = document.getElementById(HTML_CANVAS);
	sim.MovementsInput = document.getElementById(HTML_RUNNER_MOVEMENTS);
	sim.MovementsInput.onchange = (e) => simMovementsInputWatcher();
	sim.MovementsInput.onkeypress = function (e) {
		if (e.key === " ") {
			e.preventDefault();
		}
		else if (e.key === "l") {
			return false;
		}
	};
	sim.RunnerSpawns = document.getElementById(HTML_RUNNER_SPAWNS);
	sim.RunnerSpawns.onkeypress = function (e) {
		if (e.key === " ") {
			e.preventDefault();
		}
	};
	sim.HealerSpawns = document.getElementById(HTML_HEALER_SPAWNS);
	sim.HealerSpawns.onkeypress = function (e) {
		if (e.key === " ") {
			e.preventDefault();
		}
	};
	sim.StartStopButton = document.getElementById(HTML_START_BUTTON);
	sim.StartStopButton.onclick = simStartStopButtonOnClick;
	sim.PauseResumeButton = document.getElementById(HTML_PAUSE_BUTTON);
	sim.PauseResumeButton.onclick = simPauseResumeButtonOnClick;
	sim.StepButton = document.getElementById(HTML_STEP_BUTTON);
	sim.StepButton.onclick = simStepButtonOnClick;
	sim.StepBackwardButton = document.getElementById(HTML_STEP_BACKWARD_BUTTON);
	sim.StepBackwardButton.onclick = simStepBackwardButtonOnClick;
	sim.WaveSelect = document.getElementById(HTML_WAVE_SELECT);
	sim.WaveSelect.onchange = simWaveSelectOnChange;
	sim.DefLevelSelect = document.getElementById(HTML_DEF_LEVEL_SELECT);
	sim.DefLevelSelect.onchange = simDefLevelSelectOnChange;
	sim.TickCountSpan = document.getElementById(HTML_TICK_COUNT);
	sim.RunnerTable = document.getElementById(HTML_RUNNER_TABLE);
	sim.HealerTable = document.getElementById(HTML_HEALER_TABLE);

	sim.ToggleHealers = document.getElementById(HTML_ENABLE_HEALERS);
	sim.ToggleHealers.onchange = simEnableHealersOnChange;
	sim.ToggleRender = document.getElementById(HTML_ENABLE_RENDER);
	sim.ToggleRender.onchange = simEnableRenderOnChange;

	let MarkerEvent = document.getElementById(HTML_ENABLE_MARKER);
	MarkerEvent.onchange = (e) => { sim.MarkerMode = MarkerEvent.checked; }
	sim.ClearMarkers = document.getElementById(HTML_CLEAR_MARKERS);
	sim.ClearMarkers.onclick = simClearMarkersOnClick;

	markedTiles = localStorage.getItem("baTiles");
	if (markedTiles == null) markedTiles = [];
	else markedTiles = JSON.parse(markedTiles);

	sim.SaveState = document.getElementById(HTML_SAVE_BUTTON);
	sim.SaveState.onclick = simSaveStateOnClick;
	sim.LoadState = document.getElementById(HTML_LOAD_BUTTON);
	sim.LoadState.onclick = simLoadStateOnClick;

	simSetRunning(false);

	rInit(canvas, 64 * 12, 48 * 12);
	rrInit(12);
	mInit(mWAVE_1_TO_9, 64, 48);
	ruInit(5);
	simReset();
	window.onkeydown = simWindowOnKeyDown;
	canvas.onmousedown = simCanvasOnMouseDown;
	canvas.oncontextmenu = function (e) {
		e.preventDefault();
	};
}
function simUpdateRunnerTable() {
	if (!sim.IsRunning) {
		sim.RunnerTable.style.display = "none";
		return;
	}
	// Generate table body
	let tableBody = document.createElement("tbody");
	for (let i = 0; i < ba.Runners.length; ++i) {
		let runner = ba.Runners[i];
		let tableRow = document.createElement("tr");
		let td = document.createElement("td");
		td.innerHTML = runner.id;
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = runner.cycleTick;
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = runner.targetState;
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = "(" + runner.x + ", " + runner.y + ")";
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = "(" + runner.destinationX + ", " + runner.destinationY + ")";
		tableRow.appendChild(td);
		td = document.createElement("td");
		if (runner.foodTarget !== null) td.innerHTML = "#" + runner.foodTarget.id;
		else td.innerHTML = "None";
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = runner.chat;
		tableRow.appendChild(td);
		tableBody.appendChild(tableRow);
	}
	let previousBody = sim.RunnerTable.getElementsByTagName("tbody")[0];
	if (previousBody) sim.RunnerTable.removeChild(previousBody);
	sim.RunnerTable.appendChild(tableBody);
	sim.RunnerTable.style.display = "table";
}
function simUpdateHealerTable() { // TODO: Save sim state every tick
	if (!sim.IsRunning) {
		sim.HealerTable.style.display = "none";
		return;
	}
	// Generate table body
	let tableBody = document.createElement("tbody");
	for (let i = 0; i < ba.Healers.length; ++i) {
		let healer = ba.Healers[i];
		let tableRow = document.createElement("tr");
		let td = document.createElement("td");
		td.innerHTML = healer.id;
		tableRow.appendChild(td);
		td = document.createElement("td");
		if (healer.isTargetingPlayer)
			td.innerHTML = "player";
		else if (healer.isTargetingCollector)
			td.innerHTML = "collector";
		else if (healer.isTargetingRunner)
			td.innerHTML = "runner";
		else
			td.innerHTML = "";
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = healer.lastTarget || "";
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = healer.sprayTimer;
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = "(" + healer.x + ", " + healer.y + ")";
		tableRow.appendChild(td);
		td = document.createElement("td");
		td.innerHTML = "(" + healer.destinationX + ", " + healer.destinationY + ")";
		tableRow.appendChild(td);
		//        td = document.createElement("td");
		//        if (runner.foodTarget !== null) td.innerHTML = "#" + runner.foodTarget.id;
		//        else td.innerHTML = "None";
		//        tableRow.appendChild(td);
		//        td = document.createElement("td");
		//        td.innerHTML = runner.chat;
		//        tableRow.appendChild(td);
		tableBody.appendChild(tableRow);
	}
	let previousBody = sim.HealerTable.getElementsByTagName("tbody")[0];
	if (previousBody) sim.HealerTable.removeChild(previousBody);
	sim.HealerTable.appendChild(tableBody);
	sim.HealerTable.style.display = "table";
}
function simReset() {
	if (sim.IsRunning) {
		clearInterval(sim.TickTimerId);
	}
	simSetRunning(false);
	sim.CurrentFoodId = 0;
	baInit(0, 0, "");
	plInit(-1, 0);
	simDraw();
	drawLogs();
}
function simSetRunning(running) {
	if (running) {
		sim.IsRunning = true;
		sim.StartStopButton.innerHTML = "Stop Wave";
		sim.PauseResumeButton.style = "display: inline-block";
	} else {
		sim.IsRunning = false;
		sim.StartStopButton.innerHTML = "Start Wave";
		sim.PauseResumeButton.style = "display: none";
	}
	sim.SaveState.disabled = !sim.IsRunning;
	simSetPause(false);
	simUpdateRunnerTable();
	simUpdateHealerTable();
}
function simSetPause(pause) {
	if (pause) {
		sim.IsPaused = true;
		sim.PauseResumeButton.innerHTML = "Resume";
		sim.StepButton.style = "display: inline-block";
		sim.StepBackwardButton.style = "display: inline-block";
	} else {
		sim.IsPaused = false;
		sim.PauseResumeButton.innerHTML = "Pause";
		sim.StepButton.style = "display: none";
		sim.StepBackwardButton.style = "display: none";
	}
}
function simPauseResumeButtonOnClick() {
	if (sim.IsRunning) {
		if (sim.IsPaused) {
			sim.TickTimerId = setInterval(simTick, 600);
			simSetPause(false);
		} else {
			clearInterval(sim.TickTimerId);
			simSetPause(true);
		}
	}
}
function simStepButtonOnClick() {
	if (!(sim.IsRunning && sim.IsPaused)) {
		return;
	}

	if (stateHistory.peek()) {
		loadSaveState(stateHistory.forward());
	} else {
		simTick();
	}
}
function simStepBackwardButtonOnClick() {
	const state = stateHistory.backward();
	if (!state) {
		return;
	}
	loadSaveState(state);
}

function simStartStopButtonOnClick() {
	if (sim.IsRunning) {
		mResetMap();
		simReset();
	} else {
		let movements = simParseMovementsInput();
		let runnerSpawns = simParseSpawnsInput(sim.RunnerSpawns);
		let healerSpawns = simParseSpawnsInput(sim.HealerSpawns);
		if (movements === null) {
			alert("Invalid runner movements. Example: ws-s");
			return;
		}
		if (runnerSpawns === null || healerSpawns === null) {
			alert("Invalid spawn intervals. Example: 11,21,31");
			return;
		}
		simSetRunning(true);
		simSetPause(false);
		let maxRunnersAlive = 0;
		let totalRunners = 0;
		let maxHealersAlive = 0;
		let totalHealers = 0;
		let wave = sim.WaveSelect.value;
		switch (Number(wave)) {
			case 1:
				maxRunnersAlive = 2;
				totalRunners = 2;
				maxHealersAlive = 2;
				totalHealers = 2;
				break;
			case 2:
				maxRunnersAlive = 2;
				totalRunners = 3;
				maxHealersAlive = 3;
				totalHealers = 3;
				break;
			case 3:
				maxRunnersAlive = 2;
				totalRunners = 4;
				maxHealersAlive = 2;
				totalHealers = 3;
				break;
			case 4:
				maxRunnersAlive = 3;
				totalRunners = 4;
				maxHealersAlive = 3;
				totalHealers = 4;
				break;
			case 5:
				maxRunnersAlive = 4;
				totalRunners = 5;
				maxHealersAlive = 4;
				totalHealers = 5;
				break;
			case 6:
				maxRunnersAlive = 4;
				totalRunners = 6;
				maxHealersAlive = 4;
				totalHealers = 6;
				break;
			case 7:
			case 10:
				maxRunnersAlive = 5;
				totalRunners = 6;
				maxHealersAlive = 4;
				totalHealers = 7;
				break;
			case 8:
				maxRunnersAlive = 5;
				totalRunners = 7;
				maxHealersAlive = 5;
				totalHealers = 7;
				break;
			case 9:
				maxRunnersAlive = 5;
				totalRunners = 9;
				maxHealersAlive = 6;
				totalHealers = 8;
				break;
		}
		baInit(maxRunnersAlive, totalRunners, maxHealersAlive, totalHealers, movements, runnerSpawns, healerSpawns);
		if (m.mCurrentMap === mWAVE10) {
			plInit(baWAVE10_DEFENDER_SPAWN_X, baWAVE10_DEFENDER_SPAWN_Y);
			//			plInit(baWAVE10_MAIN_SPAWN_X, baWAVE10_MAIN_SPAWN_Y);
			//			plInit(baWAVE10_2A_SPAWN_X, baWAVE10_2A_SPAWN_Y);
			//			plInit(baWAVE10_PLAYER_HEALER_SPAWN_X, baWAVE10_PLAYER_HEALER_SPAWN_Y);
			//			plInit(baWAVE10_COLLECTOR_SPAWN_X, baWAVE10_COLLECTOR_SPAWN_Y);
		} else {
			plInit(baWAVE1_DEFENDER_SPAWN_X, baWAVE1_DEFENDER_SPAWN_Y);
			//            plInit(baWAVE1_MAIN_SPAWN_X, baWAVE1_MAIN_SPAWN_Y);
			//            plInit(baWAVE1_2A_SPAWN_X, baWAVE1_2A_SPAWN_Y);
			//            plInit(baWAVE1_PLAYER_HEALER_SPAWN_X, baWAVE1_PLAYER_HEALER_SPAWN_Y);
			//            plInit(baWAVE1_COLLECTOR_SPAWN_X, baWAVE1_COLLECTOR_SPAWN_Y);
		}
		console.log("Wave " + wave + " started!");
		simTick();
		sim.TickTimerId = setInterval(simTick, 600);
	}
}
function simMovementsInputWatcher() {
	ba.runnerMovements = simParseMovementsInput();
	ba.Runners.forEach(runner => {
		let movementIndex = runner.id - 1;
		if (movementIndex < ba.runnerMovements.length) {
			runner.runnerRNG.forcedMovements = ba.runnerMovements[movementIndex];
		}
	});
}
function simParseMovementsInput() {
	let movements = sim.MovementsInput.value.split("-");
	for (let i = 0; i < movements.length; ++i) {
		let moves = movements[i];
		for (let j = 0; j < moves.length; ++j) {
			let move = moves[j];
			if (move !== "" && move !== "s" && move !== "w" && move !== "e") {
				return null;
			}
		}
	}
	return movements;
}
function simParseSpawnsInput(mobSpawns) {
	let spawns = mobSpawns.value.split(",");
	if (mobSpawns.value.includes("-")) {
		spawns = mobSpawns.value.split("-");
	}
	spawns = [...new Set(spawns)].filter(Boolean);
	for (let i = 0; i < spawns.length; ++i) {
		let strToInt = parseFloat(spawns[i]);
		if (!Number.isInteger(strToInt) || !+spawns[i]) {
			return null;
		}
		spawns[i] = strToInt;
	}
	spawns = spawns.sort((a, b) => { return a - b; });
	return spawns;
}
function simWindowOnKeyDown(e) { // food_drop
	if (sim.IsRunning && pl.RepairCountdown === 0) {
		if (e.key === "r") {
			mAddItem(new fFood(pl.X, pl.Y, true, ++sim.CurrentFoodId));
		} else if (e.key === "w") {
			mAddItem(new fFood(pl.X, pl.Y, false, ++sim.CurrentFoodId));
		} else if (e.key === "e") {
			pl.ShouldPickupFood = true;
			plPathfind(pl.X, pl.Y);
		} else if (e.key === "t") {
			if (baIsNextToEastTrap(pl.X, pl.Y) && ba.EastTrapCharges < 2) {
				plPathfind(pl.X, pl.Y);
				pl.RepairCountdown = 5;
				if (pl.StandStillCounter === 0) ++pl.RepairCountdown;
			} else if (baIsNextToWestTrap(pl.X, pl.Y) && ba.WestTrapCharges < 2) {
				plPathfind(pl.X, pl.Y);
				pl.RepairCountdown = 5;
				if (pl.StandStillCounter === 0) ++pl.RepairCountdown;
			}
		}
	}
	if (sim.IsRunning && e.key === "s" && document.activeElement.id !== HTML_RUNNER_MOVEMENTS) {
		simSaveStateOnClick();
	}
	else if (e.key === "l") {
		simLoadStateOnClick();
	}
	else if (e.key === " " || e.key === "Space") {
		simStartStopButtonOnClick();
		e.preventDefault();
	}
}
function simCanvasOnMouseDown(e) {
	var canvasRect = rr.Canvas.getBoundingClientRect();
	let xTile = Math.trunc((e.clientX - canvasRect.left) / rrTileSize);
	let yTile = Math.trunc((canvasRect.bottom - 1 - e.clientY) / rrTileSize);
	if (sim.MarkerMode) {
		if (e.button === 0) {
			let strTileTuple = JSON.stringify([xTile, yTile]);
			if (markedTiles.includes(strTileTuple)) {
				markedTiles = markedTiles.filter(e => e !== strTileTuple);
			} else {
				markedTiles.push(strTileTuple);
			}
			localStorage.setItem("baTiles", JSON.stringify(markedTiles));
			simDraw();
		}
	}
	else if (e.button === 0 && pl.RepairCountdown === 0) {
		pl.ShouldPickupFood = false;
		plPathfind(xTile, yTile);
	} else if (e.button === 2) {
		if (xTile === ba.CollectorX && yTile === ba.CollectorY) {
			ba.CollectorTargetX = -1;
			ba.CollectorTargetY = -1;
		} else {
			ba.CollectorTargetX = xTile;
			ba.CollectorTargetY = yTile;
		}
	}
}
function simWaveSelectOnChange(e) {
	if (sim.WaveSelect.value === "10") {
		mInit(mWAVE10, 64, 48);
	} else {
		mInit(mWAVE_1_TO_9, 64, 48);
	}
	simReset();
}
function simDefLevelSelectOnChange(e) {
	mResetMap();
	simReset();
	ruInit(Number(sim.DefLevelSelect.value));
}
function simEnableHealersOnChange(e) {
	mResetMap();
	simReset();
	sim.EnableHealers = sim.ToggleHealers.checked;
}
function simEnableRenderOnChange(e) {
	sim.EnableRender = sim.ToggleRender.checked;
	simDraw();
}
function simClearMarkersOnClick(e) {
	markedTiles = [];
	localStorage.removeItem("baTiles");
	simDraw();
}
function simTick() {
	baTick();
	plTick();
	simDraw();
	simUpdateRunnerTable();
	simUpdateHealerTable();

	stateHistory.pushState(buildSaveState());
}

function simDraw() {
	mDrawMap();
	baDrawDetails();
	mDrawItems();
	baDrawEntities();
	plDrawPlayer();
	mDrawGrid();
	baDrawOverlays();
	baDrawMarkedTiles();
	rPresent();
}
var sim = {
	TickTimerId: undefined,
	MovementsInput: undefined,
	RunnerSpawns: undefined,
	HealerSpawns: undefined,
	SaveState: undefined,
	LoadState: undefined,
	StartStopButton: undefined,
	PauseResumeButton: undefined,
	StepButton: undefined,
	WaveSelect: undefined,
	DefLevelSelect: undefined,
	TickCountSpan: undefined,
	IsRunning: undefined,
	IsPaused: undefined,
	ruSniffDistance: undefined,
	RunnerTable: undefined,
	RunnerTableBody: undefined, // unused
	HealerTable: undefined,
	HealerTableBody: undefined, // unused
	CurrentFoodId: undefined,
	ToggleHealers: undefined,
	EnableHealers: undefined,
	ToggleRender: undefined,
	EnableRender: undefined,
	MarkerMode: false,
	ClearMarkers: undefined
}

//}
//{ Player - pl
function plInit(x, y) {
	pl.X = x;
	pl.Y = y;
	pl.PathQueuePos = 0;
	pl.PathQueueX = [];
	pl.PathQueueY = [];
	pl.ShortestDistances = [];
	pl.WayPoints = [];
	pl.ShouldPickupFood = false;
	pl.StandStillCounter = 0;
	pl.RepairCountdown = 0;
}
function plTick() {
	++pl.StandStillCounter;
	let prevX = pl.X;
	let prevY = pl.Y;

	if (pl.RepairCountdown > 0) {
		if (--pl.RepairCountdown === 0) {
			if (baIsNextToEastTrap(pl.X, pl.Y)) {
				ba.EastTrapCharges = 2;
			} else if (baIsNextToWestTrap(pl.X, pl.Y)) {
				ba.WestTrapCharges = 2;
			}
		}
	} else {
		if (pl.ShouldPickupFood) {
			let itemZone = mGetItemZone(pl.X >>> 3, pl.Y >>> 3);
			let foodIndex = itemZone.length;
			while (foodIndex--) {
				let item = itemZone[foodIndex];
				if (pl.X === item.x && pl.Y === item.y) {
					itemZone.splice(foodIndex, 1);
					break;
				}
			}
			pl.ShouldPickupFood = false;
		}
		// Having 2 if's is for moving twice per tick
		// Having 1 if's is for moving once per tick
		if (pl.PathQueuePos > 0) {
			pl.X = pl.PathQueueX[--pl.PathQueuePos];
			pl.Y = pl.PathQueueY[pl.PathQueuePos];
			if (pl.PathQueuePos > 0) {
				pl.X = pl.PathQueueX[--pl.PathQueuePos];
				pl.Y = pl.PathQueueY[pl.PathQueuePos];
			}
		}

	}
	if (prevX !== pl.X || prevY !== pl.Y) {
		pl.StandStillCounter = 0;
	}

	ba.CollectorX = ba.CollectorTargetX;
	ba.CollectorY = ba.CollectorTargetY;
}
function plDrawPlayer() {
	if (pl.X >= 0) {
		if (pl.RepairCountdown === 0) rSetDrawColor(240, 240, 240, 200);
		else rSetDrawColor(180, 180, 180, 200);
		rrFill(pl.X, pl.Y);
	}
	if (sim.EnableRender) {
		pl.RenderArea = [];
		plDrawRender(pl);
		plDrawRender({ X: ba.CollectorX, Y: ba.CollectorY });
	}
}
function plDrawRender(player) {
	if (player.X >= 0) {
		rSetDrawColor(0, 0, 0, 20);
		let startX = player.X - pl.RenderDistance;
		let startY = player.Y - pl.RenderDistance;
		let endX = player.X + pl.RenderDistance;
		let endY = player.Y + pl.RenderDistance;
		for (let x = startX; x <= endX; ++x) {
			if (x < 0 || x > 64) continue;
			for (let y = startY; y <= endY; ++y) {
				rrFill(x, y);
				pl.RenderArea.push([x, y]);
			}
		}
	}
}
function plPathfind(destX, destY) {
	for (let i = 0; i < m.mWidthTiles * m.mHeightTiles; ++i) {
		pl.ShortestDistances[i] = 99999999;
		pl.WayPoints[i] = 0;
	}
	pl.WayPoints[pl.X + pl.Y * m.mWidthTiles] = 99;
	pl.ShortestDistances[pl.X + pl.Y * m.mWidthTiles] = 0;
	pl.PathQueuePos = 0;
	let pathQueueEnd = 0;
	pl.PathQueueX[pathQueueEnd] = pl.X;
	pl.PathQueueY[pathQueueEnd++] = pl.Y;
	let currentX;
	let currentY;
	let foundDestination = false;
	while (pl.PathQueuePos !== pathQueueEnd) {
		currentX = pl.PathQueueX[pl.PathQueuePos];
		currentY = pl.PathQueueY[pl.PathQueuePos++];
		if (currentX === destX && currentY === destY) {
			foundDestination = true;
			break;
		}
		let newDistance = pl.ShortestDistances[currentX + currentY * m.mWidthTiles] + 1;
		let index = currentX - 1 + currentY * m.mWidthTiles;
		if (currentX > 0 && pl.WayPoints[index] === 0 && (m.mCurrentMap[index] & 19136776) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX - 1;
			pl.PathQueueY[pathQueueEnd++] = currentY;
			pl.WayPoints[index] = 2;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX + 1 + currentY * m.mWidthTiles;
		if (currentX < m.mWidthTiles - 1 && pl.WayPoints[index] === 0 && (m.mCurrentMap[index] & 19136896) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX + 1;
			pl.PathQueueY[pathQueueEnd++] = currentY;
			pl.WayPoints[index] = 8;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX + (currentY - 1) * m.mWidthTiles;
		if (currentY > 0 && pl.WayPoints[index] === 0 && (m.mCurrentMap[index] & 19136770) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX;
			pl.PathQueueY[pathQueueEnd++] = currentY - 1;
			pl.WayPoints[index] = 1;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX + (currentY + 1) * m.mWidthTiles;
		if (currentY < m.mHeightTiles - 1 && pl.WayPoints[index] === 0 && (m.mCurrentMap[index] & 19136800) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX;
			pl.PathQueueY[pathQueueEnd++] = currentY + 1;
			pl.WayPoints[index] = 4;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX - 1 + (currentY - 1) * m.mWidthTiles;
		if (currentX > 0 && currentY > 0 && pl.WayPoints[index] === 0 &&
			(m.mCurrentMap[index] & 19136782) == 0 &&
			(m.mCurrentMap[currentX - 1 + currentY * m.mWidthTiles] & 19136776) === 0 &&
			(m.mCurrentMap[currentX + (currentY - 1) * m.mWidthTiles] & 19136770) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX - 1;
			pl.PathQueueY[pathQueueEnd++] = currentY - 1;
			pl.WayPoints[index] = 3;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX + 1 + (currentY - 1) * m.mWidthTiles;
		if (currentX < m.mWidthTiles - 1 && currentY > 0 && pl.WayPoints[index] === 0 &&
			(m.mCurrentMap[index] & 19136899) == 0 &&
			(m.mCurrentMap[currentX + 1 + currentY * m.mWidthTiles] & 19136896) === 0 &&
			(m.mCurrentMap[currentX + (currentY - 1) * m.mWidthTiles] & 19136770) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX + 1;
			pl.PathQueueY[pathQueueEnd++] = currentY - 1;
			pl.WayPoints[index] = 9;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX - 1 + (currentY + 1) * m.mWidthTiles;
		if (currentX > 0 && currentY < m.mHeightTiles - 1 && pl.WayPoints[index] === 0 &&
			(m.mCurrentMap[index] & 19136824) == 0 &&
			(m.mCurrentMap[currentX - 1 + currentY * m.mWidthTiles] & 19136776) === 0 &&
			(m.mCurrentMap[currentX + (currentY + 1) * m.mWidthTiles] & 19136800) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX - 1;
			pl.PathQueueY[pathQueueEnd++] = currentY + 1;
			pl.WayPoints[index] = 6;
			pl.ShortestDistances[index] = newDistance;
		}
		index = currentX + 1 + (currentY + 1) * m.mWidthTiles;
		if (currentX < m.mWidthTiles - 1 && currentY < m.mHeightTiles - 1 && pl.WayPoints[index] === 0 &&
			(m.mCurrentMap[index] & 19136992) == 0 &&
			(m.mCurrentMap[currentX + 1 + currentY * m.mWidthTiles] & 19136896) === 0 &&
			(m.mCurrentMap[currentX + (currentY + 1) * m.mWidthTiles] & 19136800) === 0) {
			pl.PathQueueX[pathQueueEnd] = currentX + 1;
			pl.PathQueueY[pathQueueEnd++] = currentY + 1;
			pl.WayPoints[index] = 12;
			pl.ShortestDistances[index] = newDistance;
		}
	}
	if (!foundDestination) {
		let bestDistanceStart = 0x7FFFFFFF;
		let bestDistanceEnd = 0x7FFFFFFF;
		let deviation = 10;
		for (let x = destX - deviation; x <= destX + deviation; ++x) {
			for (let y = destY - deviation; y <= destY + deviation; ++y) {
				if (x >= 0 && y >= 0 && x < m.mWidthTiles && y < m.mHeightTiles) {
					let distanceStart = pl.ShortestDistances[x + y * m.mWidthTiles];
					if (distanceStart < 100) {
						let dx = Math.max(destX - x);
						let dy = Math.max(destY - y);
						let distanceEnd = dx * dx + dy * dy;
						if (distanceEnd < bestDistanceEnd || (distanceEnd === bestDistanceEnd && distanceStart < bestDistanceStart)) {
							bestDistanceStart = distanceStart;
							bestDistanceEnd = distanceEnd;
							currentX = x;
							currentY = y;
							foundDestination = true;
						}
					}
				}
			}
		}
		if (!foundDestination) {
			pl.PathQueuePos = 0;
			return;
		}
	}
	pl.PathQueuePos = 0;
	while (currentX !== pl.X || currentY !== pl.Y) {
		let waypoint = pl.WayPoints[currentX + currentY * m.mWidthTiles];
		pl.PathQueueX[pl.PathQueuePos] = currentX;
		pl.PathQueueY[pl.PathQueuePos++] = currentY;
		if ((waypoint & 2) !== 0) {
			++currentX;
		} else if ((waypoint & 8) !== 0) {
			--currentX;
		}
		if ((waypoint & 1) !== 0) {
			++currentY;
		} else if ((waypoint & 4) !== 0) {
			--currentY;
		}
	}
}
var pl = {
	PathQueuePos: undefined,
	ShortestDistances: undefined,
	WayPoints: undefined,
	PathQueueX: undefined,
	PathQueueY: undefined,
	X: undefined,
	Y: undefined,
	ShouldPickupFood: undefined,
	StandStillCounter: undefined,
	RepairCountdown: undefined,
	RenderDistance: undefined,
	RenderArea: undefined
}

//}
//{ Food - f
function fFood(x = -1, y = -1, isGood = -1, id = -1) {
	this.x = x;
	this.y = y;
	this.isGood = isGood;
	this.id = id;
	if (this.isGood) {
		this.colorRed = 0;
		this.colorGreen = 255;
	} else {
		this.colorRed = 255;
		this.colorGreen = 0;
	}
	this.colorBlue = 0;
	this.colorAlpha = 127;
}
function lLog(x = -1, y = -1, logType = -1, id = -1) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.logType = logType
	this.colorRed = 160;
	this.colorGreen = 82;
	this.colorBlue = 45;
	this.colorAlpha = 255;
}
//}
//{ RunnerRNG - rng
function rngRunnerRNG(forcedMovements = -1) {
	this.forcedMovements = forcedMovements;
	this.forcedMovementsIndex = 0;
}
rngRunnerRNG.prototype.rollMovement = function () {
	if (this.forcedMovements.length > this.forcedMovementsIndex) {
		let movement = this.forcedMovements.charAt(this.forcedMovementsIndex++);
		if (movement === "s") {
			return rngSOUTH;
		}
		if (movement === "w") {
			return rngWEST;
		}
		if (movement === "e") {
			return rngEAST;
		}
	}
	let rnd = Math.floor(Math.random() * 6);
	if (rnd < 4) {
		return rngSOUTH;
	}
	if (rnd === 4) {
		return rngWEST;
	}
	return rngEAST;
}
//}
//{ Healer - he
function heHealer(x = -1, y = -1, id = -1) {
	this.spawnX = x;
	this.spawnY = y;
	this.x = x;
	this.y = y;
	this.destinationX = x; // calculated before movement
	this.destinationY = y;
	this.targetX = x; // calculated during every healer interaction; 2 interactions per tick
	this.targetY = y;
	this.runnerTarget; // stores runner object
	this.isTargetingPlayer = false;
	this.isTargetingRunner = false;
	this.isTargetingCollector = false;
	this.lastTarget; // either 'player' or 'runner'
	this.justSpawned = true; // special state when healer spawns where it is idle but instead of moving, stays still
	this.sprayTimer = 0; // used to time when a healer should be aggroing runners or players
	this.id = id;
}
heHealer.prototype.tick = function () {

	// TODO: create inheritance structure for players

	// healer stands still when it spawns, until player comes into LOS
	// If multiple players in LOS, randomly choose (rand=0 for def, 1 for col)
	if (this.justSpawned === true) {
		if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15) && mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
			let rand = Math.floor(Math.random() * 2);
			if (rand === 0) {
				console.log(ba.TickCounter + ": healer " + this.id + " chose defender");
				this.destinationX = findTargetTile(this.x, this.y, pl.X, pl.Y)[0];
				this.destinationY = findTargetTile(this.x, this.y, pl.X, pl.Y)[1];
				this.isTargetingPlayer = true;
			}
			else {
				console.log(ba.TickCounter + ": healer " + this.id + " chose collector");
				this.destinationX = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[0];
				this.destinationY = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[1];
				this.isTargetingCollector = true;
			}
			this.justSpawned = false;
		}
		else if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15)) {
			this.destinationX = findTargetTile(this.x, this.y, pl.X, pl.Y)[0];
			this.destinationY = findTargetTile(this.x, this.y, pl.X, pl.Y)[1];
			this.isTargetingPlayer = true;
			this.justSpawned = false;
		}
		else if (mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
			this.destinationX = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[0];
			this.destinationY = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[1];
			this.isTargetingCollector = true;
			this.justSpawned = false;
		}
	}

	// idle wander state, 1/8 chance per tick to find new destination, unless found new target
	if (!this.isTargetingPlayer && !this.isTargetingCollector && !this.isTargetingRunner && !this.justSpawned) {

		this.sprayTimer++;

		// try to target runner every 3 ticks only after 4 ticks of pause
		if (this.lastTarget === 'player' && ((this.sprayTimer + 1) % 3) === 0 && this.sprayTimer > 4) {

			// only consider runners in LOS; choose a random runner among those in LOS
			let inSightRunners = [];
			for (let i = 0; i < ba.Runners.length; ++i) {
				if (mHasLineOfSight(this.x, this.y, ba.Runners[i].x, ba.Runners[i].y, 5) && !(ba.Runners[i].isDying)) {
					inSightRunners.push(ba.Runners[i]);
				}
			}
			if (inSightRunners.length > 0) {
				let rand = Math.floor(Math.random() * inSightRunners.length);
				this.runnerTarget = inSightRunners[rand];
				this.isTargetingRunner = true;
				this.tryTarget('runner');
			}

			// if no runners in LOS, do random movement
			else {
				let rnd = Math.floor(Math.random() * 8);
				if (rnd === 0) {
					console.log(ba.TickCounter + ": healer " + this.id + " did random movement");
					const wanderRange = 60;
					let rndX = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationX = this.spawnX - wanderRange + rndX;
					let rndY = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationY = this.spawnY - wanderRange + rndY;
				}
				this.doMovement();
			}
		}

		// try to target player every tick only after 2 ticks of pause
		else if (this.lastTarget === 'runner' && this.sprayTimer > 2) {
			if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15) && mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
				let rand = Math.floor(Math.random() * 2);
				if (rand === 0) {
					console.log(ba.TickCounter + ": healer " + this.id + " chose defender");
					this.isTargetingPlayer = true;
					this.tryTarget('player');
				}
				else {
					console.log(ba.TickCounter + ": healer " + this.id + " chose collector");
					this.isTargetingCollector = true;
					this.tryTarget('collector');
				}
			}
			else if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15)) {
				this.isTargetingPlayer = true;
				this.tryTarget('player');
			}
			else if (mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
				this.isTargetingCollector = true;
				this.tryTarget('collector');
			}
			// if nobody in LOS, do random movement
			else {
				let rnd = Math.floor(Math.random() * 8);
				if (rnd === 0) {
					console.log(ba.TickCounter + ": healer " + this.id + " did random movement");
					const wanderRange = 60;
					let rndX = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationX = this.spawnX - wanderRange + rndX;
					let rndY = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationY = this.spawnY - wanderRange + rndY;
				}
				this.doMovement();
			}
		}

		// If healer isn't supposed to be targeting anything this tick, do random movement
		else {
			let rnd = Math.floor(Math.random() * 8);
			if (rnd === 0) {
				console.log(ba.TickCounter + ": healer " + this.id + " did random movement");
				const wanderRange = 60;
				let rndX = Math.floor(Math.random() * (2 * wanderRange + 1));
				this.destinationX = this.spawnX - wanderRange + rndX;
				let rndY = Math.floor(Math.random() * (2 * wanderRange + 1));
				this.destinationY = this.spawnY - wanderRange + rndY;
			}
			this.doMovement();
		}
	}

	// move toward player when targeting player
	else if (this.isTargetingPlayer) {
		this.tryTarget('player');
	}

	// move toward coll when targeting coll
	else if (this.isTargetingCollector) {
		this.tryTarget('collector');
	}

	// move toward random runner in range found earlier when targeting runner
	else if (this.isTargetingRunner) {
		if (this.runnerTarget.despawnCountdown === 0) {
			console.log(ba.TickCounter + ": retargeting");
			this.isTargetingRunner = false;
			this.lastTarget = 'runner';
			this.sprayTimer = 0;

			if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15) && mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
				let rand = Math.floor(Math.random() * 2);
				if (rand === 0) {
					console.log(ba.TickCounter + ": healer " + this.id + " chose defender");
					this.isTargetingPlayer = true;
					this.tryTarget('player');
				}
				else {
					console.log(ba.TickCounter + ": healer " + this.id + " chose collector");
					this.isTargetingCollector = true;
					this.tryTarget('collector');
				}
			}
			else if (mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15)) {
				this.isTargetingPlayer = true;
				this.tryTarget('player');
			}
			else if (mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
				this.isTargetingCollector = true;
				this.tryTarget('collector');
			}
			// if nobody in LOS, do random movement
			else {
				let rnd = Math.floor(Math.random() * 8);
				if (rnd === 0) {
					console.log(ba.TickCounter + ": healer " + this.id + " did random movement");
					const wanderRange = 60;
					let rndX = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationX = this.spawnX - wanderRange + rndX;
					let rndY = Math.floor(Math.random() * (2 * wanderRange + 1));
					this.destinationY = this.spawnY - wanderRange + rndY;
				}
				this.doMovement();
			}
		}
		else {
			this.tryTarget('runner');
		}
	}
}
heHealer.prototype.tryTarget = function (type) {
	// healer interacts with an npc twice per tick. Results in residual pathing
	//
	// every tick:
	//      healer attempts to interact (checks if its on its target tile aka closest adjacent tile to target)
	//      if interaction fails: (not in melee distance)
	//          get new destination
	//          move toward destination
	//          healer attempts to interact

	if (type === 'runner') {
		this.targetX = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[0];
		this.targetY = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[1];
		if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(this.runnerTarget.x, this.runnerTarget.y, this.x, this.y, 5)) {
			this.isTargetingRunner = false;
			this.lastTarget = 'runner';
			this.sprayTimer = 0;
		}
		else {
			this.destinationX = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[0];
			this.destinationY = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[1];

			this.doMovement();

			this.targetX = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[0];
			this.targetY = findTargetTile(this.x, this.y, this.runnerTarget.x, this.runnerTarget.y)[1];
			if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(this.runnerTarget.x, this.runnerTarget.y, this.x, this.y, 5)) {
				this.isTargetingRunner = false;
				this.lastTarget = 'runner';
				this.sprayTimer = 0;
			}
		}
	}
	else if (type === 'player') {
		this.targetX = findTargetTile(this.x, this.y, pl.X, pl.Y)[0];
		this.targetY = findTargetTile(this.x, this.y, pl.X, pl.Y)[1];
		if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15)) {
			this.isTargetingPlayer = false;
			this.lastTarget = 'player';
			this.sprayTimer = 0;
		}
		else {
			this.destinationX = findTargetTile(this.x, this.y, pl.X, pl.Y)[0];
			this.destinationY = findTargetTile(this.x, this.y, pl.X, pl.Y)[1];

			this.doMovement();

			this.targetX = findTargetTile(this.x, this.y, pl.X, pl.Y)[0];
			this.targetY = findTargetTile(this.x, this.y, pl.X, pl.Y)[1];
			if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(pl.X, pl.Y, this.x, this.y, 15)) {
				this.isTargetingPlayer = false;
				this.lastTarget = 'player';
				this.sprayTimer = 0;
			}
		}
	}
	else if (type === 'collector') {
		this.targetX = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[0];
		this.targetY = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[1];
		if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
			this.isTargetingCollector = false;
			this.lastTarget = 'player';
			this.sprayTimer = 0;
		}
		else {
			this.destinationX = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[0];
			this.destinationY = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[1];

			this.doMovement();

			this.targetX = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[0];
			this.targetY = findTargetTile(this.x, this.y, ba.CollectorX, ba.CollectorY)[1];
			if (tileDistance(this.x, this.y, this.targetX, this.targetY) === 0 && mHasLineOfSight(ba.CollectorX, ba.CollectorY, this.x, this.y, 15)) {
				this.isTargetingCollector = false;
				this.lastTarget = 'player';
				this.sprayTimer = 0;
			}
		}
	}
}
// Moves healer toward its destination. Prioritizes east/west over north/south.
// Horizontal and vertical movement can occur in the same tick.
heHealer.prototype.doMovement = function () {
	let startX = this.x;
	if (this.destinationX > startX) {
		if (!baTileBlocksPenance(startX + 1, this.y) && mCanMoveEast(startX, this.y)) {
			++this.x;
		}
	} else if (this.destinationX < startX && !baTileBlocksPenance(startX - 1, this.y) && mCanMoveWest(startX, this.y)) {
		--this.x;
	}
	if (this.destinationY > this.y) {
		if (!baTileBlocksPenance(startX, this.y + 1) && !baTileBlocksPenance(this.x, this.y + 1) && mCanMoveNorth(startX, this.y) && mCanMoveNorth(this.x, this.y)) {
			++this.y;
		}
	} else if (this.destinationY < this.y && !baTileBlocksPenance(startX, this.y - 1) && !baTileBlocksPenance(this.x, this.y - 1) && mCanMoveSouth(startX, this.y) && mCanMoveSouth(this.x, this.y)) {
		--this.y;
	}
}

// jumpDistance = tileDistance = Max(abs(Bx - Ax),abs(By - Ay));
function tileDistance(x1, y1, x2, y2) {
	let tileDistance = Math.max(Math.abs(x2 - x1), Math.abs(y2 - y1));
	return tileDistance;
}

// Healer targets closest adjacent tile to target, not target tile itself. The target tile is the one
// whose distance is smallest, or if the distance is equal, in n/s -> e/w order
function findTargetTile(x1, y1, x2, y2) { // (x1,y1) for healer, (x2,y2) for target
	let northOfTarget = tileDistance(x1, y1, x2, y2 + 1);
	let southOfTarget = tileDistance(x1, y1, x2, y2 - 1);
	let eastOfTarget = tileDistance(x1, y1, x2 + 1, y2);
	let westOfTarget = tileDistance(x1, y1, x2 - 1, y2);

	let minDistance = Math.min(northOfTarget, southOfTarget, eastOfTarget, westOfTarget);
	if (minDistance === northOfTarget) {
		//console.log("north");
		return [x2, y2 + 1];
	}
	if (minDistance === southOfTarget) {
		//console.log("south");
		return [x2, y2 - 1];
	}
	if (minDistance === eastOfTarget) {
		//console.log("east");
		return [x2 + 1, y2];
	}
	if (minDistance === westOfTarget) {
		//console.log("west");
		return [x2 - 1, y2];
	}
}


//}
//{ Runner - ru
function ruInit(sniffDistance) {
	sim.ruSniffDistance = sniffDistance;
}
function ruRunner(x = -1, y = -1, runnerRNG = -1, isWave10 = -1, id = -1) { // TODO: healers re-aggro if runner dies
	this.x = x;
	this.y = y;
	this.destinationX = x;
	this.destinationY = y;
	this.cycleTick = 1;
	this.targetState = 0;
	this.foodTarget = null;
	this.blughhhhCountdown = 0;
	this.standStillCounter = 0;
	this.despawnCountdown = -1;
	this.isDying = false;
	this.diedThisTick = false; // Hacky solution to 1t longer despawn after urghh if stand still.
	this.runnerRNG = runnerRNG;
	this.isWave10 = isWave10;
	this.id = id;
	this.chat = "";
}
ruRunner.prototype.checkRender = function () {
	if (sim.EnableRender == false || sim.EnableRender == undefined) {
		return true;
	}
	for (let i = 0; i < pl.RenderArea.length; ++i) {
		let renderCoordinate = pl.RenderArea[i];
		if (renderCoordinate[0] == this.x && renderCoordinate[1] == this.y) {
			return true;
		}
	}
	return false;
}
ruRunner.prototype.tick = function () {
	this.chat = "";
	if (++this.cycleTick > 10) {
		this.cycleTick = 1;
	}
	++this.standStillCounter;
	if (this.despawnCountdown !== -1) {
		if (--this.despawnCountdown === 0) {
			ba.RunnersToRemove.push(this);
			if (!this.isDying) {
				--ba.RunnersAlive;
			} else {
				if (baIsNearEastTrap(this.x, this.y)) {
					if (ba.EastTrapCharges > 0) --ba.EastTrapCharges;
				}
				if (baIsNearWestTrap(this.x, this.y)) {
					if (ba.WestTrapCharges > 0) --ba.WestTrapCharges;
				}
			}
		}
	} else {
		if (!this.isDying) {
			switch (this.cycleTick) {
				case 1:
					this.doTick1();
					break;
				case 2:
					this.doTick2Or5();
					break;
				case 3:
					this.doTick3();
					break;
				case 4:
					this.doTick4();
					break;
				case 5:
					this.doTick2Or5();
					break;
				case 6:
					this.doTick6();
					break;
				case 7:
				case 8:
				case 9:
				case 10:
					this.doTick7To10();
					break;
			}
		}
		if (this.isDying) {
			if (this.standStillCounter > 2) {
				++ba.RunnersKilled;
				--ba.RunnersAlive;
				this.print("Urghhh!");
				if (this.diedThisTick) {
					this.despawnCountdown = 3;
				} else {
					this.despawnCountdown = 2;
				}
			}
			if (this.diedThisTick) {
				this.diedThisTick = false;
			}
		}
	}
}
ruRunner.prototype.doMovement = function () { // TODO: Doesn't consider diagonal movement block flags
	let startX = this.x;
	if (this.destinationX > startX) {
		if (!baTileBlocksPenance(startX + 1, this.y) && mCanMoveEast(startX, this.y)) {
			++this.x;
			this.standStillCounter = 0;
		}
	} else if (this.destinationX < startX && !baTileBlocksPenance(startX - 1, this.y) && mCanMoveWest(startX, this.y)) {
		--this.x;
		this.standStillCounter = 0;
	}
	if (this.destinationY > this.y) {
		if (!baTileBlocksPenance(startX, this.y + 1) && !baTileBlocksPenance(this.x, this.y + 1) && mCanMoveNorth(startX, this.y) && mCanMoveNorth(this.x, this.y)) {
			++this.y;
			this.standStillCounter = 0;
		}
	} else if (this.destinationY < this.y && !baTileBlocksPenance(startX, this.y - 1) && !baTileBlocksPenance(this.x, this.y - 1) && mCanMoveSouth(startX, this.y) && mCanMoveSouth(this.x, this.y)) {
		--this.y;
		this.standStillCounter = 0;
	}
}
ruRunner.prototype.tryTargetFood = function () {
	let isRendered = this.checkRender();
	if (isRendered == false &&
		this.cycleTick >= 2 && this.cycleTick <= 6) {
		++this.targetState;
		return;
	}
	let xZone = this.x >> 3;
	let yZone = this.y >> 3;
	let firstFoodFound = null;
	let endXZone = Math.max(xZone - 1, 0);
	let endYZone = Math.max(yZone - 1, 0);
	for (let x = Math.min(xZone + 1, m.mItemZonesWidth - 1); x >= endXZone; --x) {
		for (let y = Math.min(yZone + 1, m.mItemZonesHeight - 1); y >= endYZone; --y) {
			let itemZone = mGetItemZone(x, y);
			itemZone = itemZone.filter(item => item.isGood !== undefined);
			for (let foodIndex = itemZone.length - 1; foodIndex >= 0; --foodIndex) {
				let food = itemZone[foodIndex];
				if (!mHasLineOfSight(this.x, this.y, food.x, food.y)) {
					continue;
				}
				if (firstFoodFound === null) {
					firstFoodFound = food;
				}
				if (Math.max(Math.abs(this.x - food.x), Math.abs(this.y - food.y)) <= sim.ruSniffDistance) {
					this.foodTarget = firstFoodFound;
					this.destinationX = firstFoodFound.x;
					this.destinationY = firstFoodFound.y;
					this.targetState = 0;
					return;
				}
			}
		}
	}
}
ruRunner.prototype.tryEatAndCheckTarget = function () {
	if (this.foodTarget !== null) {
		let itemZone = mGetItemZone(this.foodTarget.x >>> 3, this.foodTarget.y >>> 3);
		let foodIndex = itemZone.map(food => food.id).indexOf(this.foodTarget.id);
		if (foodIndex === -1) {
			this.foodTarget = null;
			this.targetState = 0;
			return true;
		} else if (this.x === this.foodTarget.x && this.y === this.foodTarget.y) {
			if (this.foodTarget.isGood) {
				this.print("Chomp, chomp.");
				if (
					baIsNearEastTrap(this.x, this.y) && ba.EastTrapCharges > 0 ||
					baIsNearWestTrap(this.x, this.y) && ba.WestTrapCharges > 0
				) {
					this.diedThisTick = true;
					this.isDying = true;
				}
			} else {
				this.print("Blughhhh.");
				this.blughhhhCountdown = 3;
				this.targetState = 0;
				if (this.cycleTick > 5) {
					this.cycleTick -= 5;
				}
				this.setDestinationBlughhhh();
			}
			itemZone.splice(foodIndex, 1);
			return true;
		}
	}
	return false;
}
ruRunner.prototype.cancelDestination = function () {
	this.destinationX = this.x;
	this.destinationY = this.y;
}
ruRunner.prototype.setDestinationBlughhhh = function () {
	this.destinationX = this.x;
	if (this.isWave10) {
		this.destinationY = baEAST_TRAP_Y - 4;
	} else {
		this.destinationY = baEAST_TRAP_Y + 4;
	}
}
ruRunner.prototype.setDestinationRandomWalk = function () {
	if (this.x <= 27) { // TODO: These same for wave 10?
		if (this.y === 8 || this.y === 9) {
			this.destinationX = 30;
			this.destinationY = 8;
			return;
		} else if (this.x === 25 && this.y === 7) {
			this.destinationX = 26;
			this.destinationY = 8;
			return;
		}
	} else if (this.x <= 32) {
		if (this.y <= 8) {
			this.destinationX = 30;
			this.destinationY = 6;
			return;
		}
	} else if (this.y === 7 || this.y === 8) {
		this.destinationX = 31;
		this.destinationY = 8;
		return;
	}
	let direction = this.runnerRNG.rollMovement();
	if (direction === rngSOUTH) {
		this.destinationX = this.x;
		this.destinationY = this.y - 5;
	} else if (direction === rngWEST) {
		this.destinationX = this.x - 5;
		if (this.destinationX < baWEST_TRAP_X - 1) { // TODO: Same for wave 10?
			this.destinationX = baWEST_TRAP_X - 1;
		}
		this.destinationY = this.y;
	} else {
		this.destinationX = this.x + 5;
		if (this.isWave10) {
			if (this.destinationX > baEAST_TRAP_X - 1) {
				this.destinationX = baEAST_TRAP_X - 1;
			}
		} else if (this.destinationX > baEAST_TRAP_X) {
			this.destinationX = baEAST_TRAP_X;
		}
		this.destinationY = this.y;
	}
}
ruRunner.prototype.doTick1 = function () {
	if (this.y === 6) {
		this.despawnCountdown = 3;
		this.print("Raaa!");
		return;
	}
	if (this.blughhhhCountdown > 0) {
		--this.blughhhhCountdown;
	} else {
		++this.targetState;
		if (this.targetState > 3) {
			this.targetState = 1;
		}
	}
	let ateOrTargetGone = this.tryEatAndCheckTarget();
	if (this.blughhhhCountdown === 0 && this.foodTarget === null) { // Could make this line same as tick 6 without any difference?
		this.cancelDestination();
	}
	if (!ateOrTargetGone) {
		this.doMovement();
	}
}
ruRunner.prototype.doTick2Or5 = function () {
	if (this.targetState === 2) {
		this.tryTargetFood();
	}
	this.doTick7To10();
}
ruRunner.prototype.doTick3 = function () {
	if (this.targetState === 3) {
		this.tryTargetFood();
	}
	this.doTick7To10();
}
ruRunner.prototype.doTick4 = function () {
	if (this.targetState === 1) {
		this.tryTargetFood();
	}
	this.doTick7To10();
}
ruRunner.prototype.doTick6 = function () {
	if (this.y === 6) {
		this.despawnCountdown = 3;
		this.print("Raaa!");
		return;
	}
	if (this.blughhhhCountdown > 0) {
		--this.blughhhhCountdown;
	}
	if (this.targetState === 3) {
		this.tryTargetFood();
	}
	let ateOrTargetGone = this.tryEatAndCheckTarget();
	if (this.blughhhhCountdown === 0 && (this.foodTarget === null || ateOrTargetGone)) {
		this.setDestinationRandomWalk();
	}
	if (!ateOrTargetGone) {
		this.doMovement();
	}
}
ruRunner.prototype.doTick7To10 = function () {
	let ateOrTargetGone = this.tryEatAndCheckTarget();
	if (!ateOrTargetGone) {
		this.doMovement();
	}
}
ruRunner.prototype.print = function (string) {
	console.log(ba.TickCounter + ": Runner " + this.id + ": " + string);
	this.chat = string;
}
//}
//{ BaArena - ba
function baInit(maxRunnersAlive, totalRunners, maxHealersAlive, totalHealers, runnerMovements, runnerSpawns, healerSpawns) {
	ba.Runners = [];
	ba.RunnersToRemove = [];
	ba.Runnerspawns = runnerSpawns;
	ba.RunnerspawnsIndex = 0;
	ba.RunnersAlive = 0;
	ba.RunnersKilled = 0;
	ba.HealersAlive = 0;
	ba.HealersKilled = 0;
	ba.MaxRunnersAlive = maxRunnersAlive;
	ba.TotalRunners = totalRunners;
	ba.MaxHealersAlive = maxHealersAlive;
	ba.TotalHealers = totalHealers;
	ba.RunnerMovements = runnerMovements;
	ba.RunnerMovementsIndex = 0;

	ba.Healers = [];
	ba.Healerspawns = healerSpawns;
	ba.HealerspawnsIndex = 0;

	ba.TickCounter = 0;
	ba.CollectorX = -1;
	ba.CollectorY = -1;
	ba.CollectorTargetX = -1;
	ba.CollectorTargetY = -1;
	ba.CurrentPlayerId = 1;
	ba.CurrentRunnerId = 1;
	ba.CurrentHealerId = 1;
	ba.EastTrapCharges = 2;
	ba.WestTrapCharges = 2;

	pl.RenderDistance = 15;
	pl.RenderArea = [];

	sim.TickCountSpan.innerHTML = ba.TickCounter;
}
function baTick() {
	++ba.TickCounter;
	ba.RunnersToRemove.length = 0;
	for (let i = 0; i < ba.Healers.length; ++i) {
		ba.Healers[i].tick(); // TODO: healers and runners should be in same array.
	}
	for (let i = 0; i < ba.Runners.length; ++i) {
		ba.Runners[i].tick();
	}
	for (let i = 0; i < ba.RunnersToRemove.length; ++i) {
		let runner = ba.RunnersToRemove[i];
		let index = ba.Runners.indexOf(runner);
		ba.Runners.splice(index, 1);
	}
	if (ba.TickCounter > 1 && ba.TickCounter % 10 === 1) {
		if (ba.RunnersAlive < ba.MaxRunnersAlive && ba.RunnersKilled + ba.RunnersAlive < ba.TotalRunners && ba.Runnerspawns.length === 0) {
			let movements;
			if (ba.RunnerMovements.length > ba.RunnerMovementsIndex) {
				movements = ba.RunnerMovements[ba.RunnerMovementsIndex++];
			} else {
				movements = "";
			}
			if (m.mCurrentMap === mWAVE_1_TO_9) {
				ba.Runners.push(new ruRunner(baWAVE1_RUNNER_SPAWN_X, baWAVE1_RUNNER_SPAWN_Y, new rngRunnerRNG(movements), false, ba.CurrentRunnerId++));
			} else {
				ba.Runners.push(new ruRunner(baWAVE10_RUNNER_SPAWN_X, baWAVE10_RUNNER_SPAWN_Y, new rngRunnerRNG(movements), true, ba.CurrentRunnerId++));
			}
			++ba.RunnersAlive;
		}
		if (sim.EnableHealers && ba.Healerspawns.length === 0) {
			if (ba.HealersAlive < ba.MaxHealersAlive && ba.HealersKilled + ba.HealersAlive < ba.TotalHealers) {
				if (m.mCurrentMap === mWAVE_1_TO_9) {
					ba.Healers.push(new heHealer(baWAVE1_NPC_HEALER_SPAWN_X, baWAVE1_NPC_HEALER_SPAWN_Y, ba.CurrentHealerId++));
				} else {
					ba.Healers.push(new heHealer(baWAVE10_NPC_HEALER_SPAWN_X, baWAVE10_NPC_HEALER_SPAWN_Y, ba.CurrentHealerId++));
				}
				++ba.HealersAlive;
			}
		}
	}
	// custom spawn times
	if (ba.RunnersAlive < ba.MaxRunnersAlive && ba.RunnersKilled + ba.RunnersAlive < ba.TotalRunners && ba.Runnerspawns.length > 0) {
		if (ba.Runnerspawns[ba.RunnerspawnsIndex] === ba.TickCounter) {
			let movements;
			if (ba.RunnerMovements.length > ba.RunnerMovementsIndex) {
				movements = ba.RunnerMovements[ba.RunnerMovementsIndex++];
			} else {
				movements = "";
			}
			if (m.mCurrentMap === mWAVE_1_TO_9) {
				ba.Runners.push(new ruRunner(baWAVE1_RUNNER_SPAWN_X, baWAVE1_RUNNER_SPAWN_Y, new rngRunnerRNG(movements), false, ba.CurrentRunnerId++));
			} else {
				ba.Runners.push(new ruRunner(baWAVE10_RUNNER_SPAWN_X, baWAVE10_RUNNER_SPAWN_Y, new rngRunnerRNG(movements), true, ba.CurrentRunnerId++));
			}
			++ba.RunnersAlive;
			++ba.RunnerspawnsIndex;
		}
	}
	if (sim.EnableHealers && ba.Healerspawns.length > 0) {
		if (ba.Healerspawns[ba.HealerspawnsIndex] === ba.TickCounter) {
			if (ba.HealersAlive < ba.MaxHealersAlive && ba.HealersKilled + ba.HealersAlive < ba.TotalHealers) {
				if (m.mCurrentMap === mWAVE_1_TO_9) {
					ba.Healers.push(new heHealer(baWAVE1_NPC_HEALER_SPAWN_X, baWAVE1_NPC_HEALER_SPAWN_Y, ba.CurrentHealerId++));
				} else {
					ba.Healers.push(new heHealer(baWAVE10_NPC_HEALER_SPAWN_X, baWAVE10_NPC_HEALER_SPAWN_Y, ba.CurrentHealerId++));
				}
				++ba.HealersAlive;
				++ba.HealerspawnsIndex;
			}
		}
	}
	if (ba.TickCounter > 1 && ba.TickCounter % 10 === 1) {
		drawLogs();
	}
	sim.TickCountSpan.innerHTML = ba.TickCounter;
	simMovementsInputWatcher()
}
function baDrawOverlays() {
	if (m.mCurrentMap !== mWAVE_1_TO_9 && m.mCurrentMap !== mWAVE10) {
		return;
	}
	rSetDrawColor(240, 10, 10, 220);
	if (m.mCurrentMap === mWAVE_1_TO_9) {
		rrOutline(18, 37);
	} else {
		rrOutline(18, 38);
	}
	rrOutline(24, 39);
	rrFill(33, 6);
	rSetDrawColor(10, 10, 240, 220);
	if (m.mCurrentMap === mWAVE_1_TO_9) {
		rrOutline(36, 39);
	} else {
		rrOutline(42, 38);
	}
	rrFill(34, 6);
	rSetDrawColor(10, 240, 10, 220);
	if (m.mCurrentMap === mWAVE_1_TO_9) {
		rrOutline(42, 37);
	} else {
		rrOutline(36, 39);
	}
	rrFill(35, 6);
	rSetDrawColor(240, 240, 10, 220);
	rrFill(36, 6);
}
function baDrawDetails() {
	if (m.mCurrentMap !== mWAVE_1_TO_9 && m.mCurrentMap !== mWAVE10) {
		return;
	}
	rSetDrawColor(160, 82, 45, 255);
	rrCone(40, 32);
	rrCone(40, 31);
	rrCone(41, 32);
	rrCone(41, 31);
	rrCone(43, 31);
	rrCone(36, 34);
	rrCone(36, 35);
	rrCone(37, 34);
	rrCone(37, 35);
	rrCone(39, 36);
	rrCone(43, 22);
	rrCone(43, 23);
	rrCone(44, 22);
	rrCone(44, 23);
	rrCone(45, 24);
	if (!sim.IsRunning) {
		if (m.mCurrentMap === mWAVE_1_TO_9) {
			rrFillItem(baWAVE1_NORTH_LOG_X, baWAVE1_NORTH_LOG_Y);
			rrFillItem(baWAVE1_SOUTH_LOG_X, baWAVE1_SOUTH_LOG_Y);
		} else {
			rrFillItem(baWAVE10_NORTH_LOG_X, baWAVE10_NORTH_LOG_Y);
			rrFillItem(baWAVE10_SOUTH_LOG_X, baWAVE10_SOUTH_LOG_Y);
		}
	}
	if (ba.EastTrapCharges > 1) {
		rrFill(45, 26);
	} else {
		rrOutline(45, 26);
		if (ba.EastTrapCharges > 0) rrFillItem(45, 26);
	}
	if (ba.WestTrapCharges > 1) {
		rrFill(15, 25);
	} else {
		rrOutline(15, 25);
		if (ba.WestTrapCharges > 0) rrFillItem(15, 25);
	}

	if (m.mCurrentMap === mWAVE10) {
		rrOutlineBig(27, 20, 8, 8);
	}
	rSetDrawColor(127, 127, 127, 255);
	rrFillItem(32, 34);
}
function baDrawEntities() {
	rSetDrawColor(10, 10, 240, 127);
	for (let i = 0; i < ba.Runners.length; ++i) {
		rrFill(ba.Runners[i].x, ba.Runners[i].y);
	}
	rSetDrawColor(11, 199, 11, 150);
	for (let i = 0; i < ba.Healers.length; ++i) {
		rrFill(ba.Healers[i].x, ba.Healers[i].y);
	}
	if (ba.CollectorX !== -1) { // draw coll
		rSetDrawColor(240, 240, 10, 200);
		rrFill(ba.CollectorX, ba.CollectorY);
	}
}
function baDrawMarkedTiles() {
	let markedTilesArr = [...markedTiles].map(JSON.parse);
	rSetDrawColor(0, 0, 0, 255);
	for (let i of markedTilesArr) {
		let xTile = i[0].toString();
		let yTile = i[1].toString();
		rrOutline(xTile, yTile);
	}
}
function baIsNearWestTrap(x, y) {
	return (Math.abs(x - baWEST_TRAP_X) < 2 && Math.abs(y - baWEST_TRAP_Y) < 2);
}
function baIsNearEastTrap(x, y) {
	return (Math.abs(x - baEAST_TRAP_X) < 2 && Math.abs(y - baEAST_TRAP_Y) < 2);
}
function baIsNextToWestTrap(x, y) {
	return (Math.abs(x - baWEST_TRAP_X) < 2 && Math.abs(y - baWEST_TRAP_Y) < 1) || (Math.abs(x - baWEST_TRAP_X) < 1 && Math.abs(y - baWEST_TRAP_Y) < 2);
}
function baIsNextToEastTrap(x, y) {
	return (Math.abs(x - baEAST_TRAP_X) < 2 && Math.abs(y - baEAST_TRAP_Y) < 1) || (Math.abs(x - baEAST_TRAP_X) < 1 && Math.abs(y - baEAST_TRAP_Y) < 2);
}
function baTileBlocksPenance(x, y) {
	// Player blocks
	if (x === pl.X && y === pl.Y) {
		return true;
	}
	// Collector blocks
	if (x === ba.CollectorX && y === ba.CollectorY) {
		return true;
	}
	if (y === 22) {
		if (x >= 20 && x <= 22) {
			return true;
		}
		if (m.mCurrentMap === mWAVE_1_TO_9 && x >= 39 && x <= 41) {
			return true;
		}
	} else if (x === 46 && y >= 9 && y <= 12) {
		return true;
	} else if (m.mCurrentMap === mWAVE_1_TO_9 && x === 27 && y === 24) { // the tile
		return true;
	}
	return false;
}
var ba = {
	Runners: undefined,
	RunnersToRemove: undefined,
	TickCounter: undefined,
	RunnersAlive: undefined,
	RunnersKilled: undefined,
	TotalRunners: undefined,
	MaxRunnersAlive: undefined,
	Runnerspawns: undefined,
	RunnerspawnsIndex: undefined,
	RunnerMovements: undefined,
	RunnerMovementsIndex: undefined,
	Healers: undefined,
	HealersAlive: undefined,
	HealersKilled: undefined,
	TotalHealers: undefined,
	MaxHealersAlive: undefined,
	Healerspawns: undefined,
	HealerspawnsIndex: undefined,
	Players: undefined, // unused
	CollectorX: undefined,
	CollectorY: undefined,
	CollectorTargetX: undefined,
	CollectorTargetY: undefined,
	CurrentRunnerId: undefined,
	CurrentHealerId: undefined,
	CurrentPlayerId: undefined,
	EastTrapCharges: undefined,
	WestTrapCharges: undefined
}
//}
//{ Map - m
function mInit(map, widthTiles, heightTiles) {
	m.mCurrentMap = map;
	m.mWidthTiles = widthTiles;
	m.mHeightTiles = heightTiles;
	mResetMap();
}
function mResetMap() {
	m.mItemZones = [];
	m.mItemZonesWidth = 1 + ((m.mWidthTiles - 1) >> 3);
	m.mItemZonesHeight = 1 + ((m.mHeightTiles - 1) >> 3);
	for (let xZone = 0; xZone < m.mItemZonesWidth; ++xZone) {
		for (let yZone = 0; yZone < m.mItemZonesHeight; ++yZone) {
			m.mItemZones[xZone + m.mItemZonesWidth * yZone] = [];
		}
	}
}
function mAddItem(item) {
	mGetItemZone(item.x >>> 3, item.y >>> 3).push(item);
}
function mGetItemZone(xZone, yZone) {
	return m.mItemZones[xZone + m.mItemZonesWidth * yZone];
}
function mGetTileFlag(x, y) {
	return m.mCurrentMap[x + y * m.mWidthTiles];
}
function mCanMoveEast(x, y) {
	return (mGetTileFlag(x + 1, y) & (mMOVE_WEST_MASK | mMOVE_FULL_MASK)) === 0;
}
function mCanMoveWest(x, y) {
	return (mGetTileFlag(x - 1, y) & (mMOVE_EAST_MASK | mMOVE_FULL_MASK)) === 0;
}
function mCanMoveNorth(x, y) {
	return (mGetTileFlag(x, y + 1) & (mMOVE_SOUTH_MASK | mMOVE_FULL_MASK)) === 0;
}
function mCanMoveSouth(x, y) {
	return (mGetTileFlag(x, y - 1) & (mMOVE_NORTH_MASK | mMOVE_FULL_MASK)) === 0;
}
function mDrawGrid() {
	for (var xTile = 0; xTile < m.mWidthTiles; ++xTile) {
		if (xTile % 8 == 7) {
			rSetDrawColor(40, 22, 12, 175);
		} else {
			rSetDrawColor(0, 0, 0, 48);
		}
		rrEastLineBig(xTile, 0, m.mHeightTiles);
	}
	for (var yTile = 0; yTile < m.mHeightTiles; ++yTile) {
		if (yTile % 8 == 7) {
			rSetDrawColor(40, 22, 12, 175);
		} else {
			rSetDrawColor(0, 0, 0, 48);
		}
		rrNorthLineBig(0, yTile, m.mWidthTiles);
	}
}
function mDrawItems() {
	let endI = m.mItemZones.length;
	for (let i = 0; i < endI; ++i) {
		let itemZone = m.mItemZones[i];
		let endJ = itemZone.length;
		for (let j = 0; j < endJ; ++j) {
			let item = itemZone[j];
			rSetDrawColor(item.colorRed, item.colorGreen, item.colorBlue, item.colorAlpha);
			rrFillItem(item.x, item.y);
		}
	}
}
function drawLogs() {
	let logZone = mGetItemZone(28 >>> 3, 39 >>> 3);
	logZone = logZone.filter(item => item.logType !== undefined);

	if (!logZone.some(item => item.logType === "North")) {
		if (m.mCurrentMap === mWAVE_1_TO_9)
			mAddItem(new lLog(baWAVE1_NORTH_LOG_X, baWAVE1_NORTH_LOG_Y, "North", ++sim.CurrentFoodId));
		else
			mAddItem(new lLog(baWAVE10_NORTH_LOG_X, baWAVE10_NORTH_LOG_Y, "North", ++sim.CurrentFoodId));
	}
	if (!logZone.some(item => item.logType === "South")) {
		if (m.mCurrentMap === mWAVE_1_TO_9)
			mAddItem(new lLog(baWAVE1_SOUTH_LOG_X, baWAVE1_SOUTH_LOG_Y, "South", ++sim.CurrentFoodId));
		else
			mAddItem(new lLog(baWAVE10_SOUTH_LOG_X, baWAVE10_SOUTH_LOG_Y, "South", ++sim.CurrentFoodId));
	}

}
function mDrawMap() {
	rSetDrawColor(206, 183, 117, 255);
	rClear();
	for (let y = 0; y < m.mHeightTiles; ++y) {
		for (let x = 0; x < m.mWidthTiles; ++x) {
			let tileFlag = mGetTileFlag(x, y);
			if ((tileFlag & mLOS_FULL_MASK) !== 0) {
				rSetDrawColor(0, 0, 0, 255);
				rrFillOpaque(x, y);
			} else {
				if ((tileFlag & mMOVE_FULL_MASK) !== 0) {
					rSetDrawColor(127, 127, 127, 255);
					rrFillOpaque(x, y);
				}
				if ((tileFlag & mLOS_EAST_MASK) !== 0) {
					rSetDrawColor(0, 0, 0, 255);
					rrEastLine(x, y);
				} else if ((tileFlag & mMOVE_EAST_MASK) !== 0) {
					rSetDrawColor(127, 127, 127, 255);
					rrEastLine(x, y);
				}
				if ((tileFlag & mLOS_WEST_MASK) !== 0) {
					rSetDrawColor(0, 0, 0, 255);
					rrWestLine(x, y);
				} else if ((tileFlag & mMOVE_WEST_MASK) !== 0) {
					rSetDrawColor(127, 127, 127, 255);
					rrWestLine(x, y);
				}
				if ((tileFlag & mLOS_NORTH_MASK) !== 0) {
					rSetDrawColor(0, 0, 0, 255);
					rrNorthLine(x, y);
				} else if ((tileFlag & mMOVE_NORTH_MASK) !== 0) {
					rSetDrawColor(127, 127, 127, 255);
					rrNorthLine(x, y);
				}
				if ((tileFlag & mLOS_SOUTH_MASK) !== 0) {
					rSetDrawColor(0, 0, 0, 255);
					rrSouthLine(x, y);
				} else if ((tileFlag & mMOVE_SOUTH_MASK) !== 0) {
					rSetDrawColor(127, 127, 127, 255);
					rrSouthLine(x, y);
				}
			}
		}
	}
}
function mHasLineOfSight(x1, y1, x2, y2, range = 99) {
	if (tileDistance(x1, y1, x2, y2) > range) {
		return false;
	}
	let dx = x2 - x1;
	let dxAbs = Math.abs(dx);
	let dy = y2 - y1;
	let dyAbs = Math.abs(dy);
	if (dxAbs > dyAbs) {
		let xTile = x1;
		let y = y1 << 16;
		let slope = Math.trunc((dy << 16) / dxAbs);
		let xInc;
		let xMask;
		if (dx > 0) {
			xInc = 1;
			xMask = mLOS_WEST_MASK | mLOS_FULL_MASK;
		} else {
			xInc = -1;
			xMask = mLOS_EAST_MASK | mLOS_FULL_MASK;
		}
		let yMask;
		y += 0x8000;
		if (dy < 0) {
			y -= 1;
			yMask = mLOS_NORTH_MASK | mLOS_FULL_MASK;
		} else {
			yMask = mLOS_SOUTH_MASK | mLOS_FULL_MASK;
		}
		while (xTile !== x2) {
			xTile += xInc;
			let yTile = y >>> 16;
			if ((mGetTileFlag(xTile, yTile) & xMask) !== 0) {
				return false;
			}
			y += slope;
			let newYTile = y >>> 16;
			if (newYTile !== yTile && (mGetTileFlag(xTile, newYTile) & yMask) !== 0) {
				return false;
			}
		}
	} else {
		let yTile = y1;
		let x = x1 << 16;
		let slope = Math.trunc((dx << 16) / dyAbs);
		let yInc;
		let yMask;
		if (dy > 0) {
			yInc = 1;
			yMask = mLOS_SOUTH_MASK | mLOS_FULL_MASK;
		} else {
			yInc = -1;
			yMask = mLOS_NORTH_MASK | mLOS_FULL_MASK;
		}
		let xMask;
		x += 0x8000;
		if (dx < 0) {
			x -= 1;
			xMask = mLOS_EAST_MASK | mLOS_FULL_MASK;
		} else {
			xMask = mLOS_WEST_MASK | mLOS_FULL_MASK;
		}
		while (yTile !== y2) {
			yTile += yInc;
			let xTile = x >>> 16;
			if ((mGetTileFlag(xTile, yTile) & yMask) !== 0) {
				return false;
			}
			x += slope;
			let newXTile = x >>> 16;
			if (newXTile !== xTile && (mGetTileFlag(newXTile, yTile) & xMask) !== 0) {
				return false;
			}
		}
	}
	return true;
}
var m = {
	mCurrentMap: undefined,
	mWidthTiles: undefined,
	mHeightTiles: undefined,
	mItemZones: undefined,
	mItemZonesWidth: undefined,
	mItemZonesHeight: undefined
}
//}
//{ RsRenderer - rr
function rrInit(tileSize) {
	rrTileSize = tileSize;
}
function rrSetTileSize(size) {
	rrTileSize = size;
}
function rrSetSize(widthTiles, heightTiles) {
	rrWidthTiles = widthTiles;
	rrHeightTiles = heightTiles;
	rResizeCanvas(rrTileSize * rrWidthTiles, rrTileSize * rrHeightTiles);
}
function rrFillOpaque(x, y) {
	rSetFilledRect(x * rrTileSize, y * rrTileSize, rrTileSize, rrTileSize);
}
function rrFill(x, y) {
	rDrawFilledRect(x * rrTileSize, y * rrTileSize, rrTileSize, rrTileSize);
}
function rrFillBig(x, y, width, height) {
	rDrawFilledRect(x * rrTileSize, y * rrTileSize, width * rrTileSize, height * rrTileSize);
}
function rrOutline(x, y) {
	rDrawOutlinedRect(x * rrTileSize, y * rrTileSize, rrTileSize, rrTileSize);
}
function rrOutlineBig(x, y, width, height) {
	rDrawOutlinedRect(x * rrTileSize, y * rrTileSize, rrTileSize * width, rrTileSize * height);
}
function rrWestLine(x, y) {
	rDrawVerticalLine(x * rrTileSize, y * rrTileSize, rrTileSize);
}
function rrWestLineBig(x, y, length) {
	rDrawHorizontalLine(x * rrTileSize, y * rrTileSize, rrTileSize * length)
}
function rrEastLine(x, y) {
	rDrawVerticalLine((x + 1) * rrTileSize - 1, y * rrTileSize, rrTileSize);
}
function rrEastLineBig(x, y, length) {
	rDrawVerticalLine((x + 1) * rrTileSize - 1, y * rrTileSize, rrTileSize * length);
}
function rrSouthLine(x, y) {
	rDrawHorizontalLine(x * rrTileSize, y * rrTileSize, rrTileSize);
}
function rrSouthLineBig(x, y, length) {
	rDrawHorizontalLine(x * rrTileSize, y * rrTileSize, rrTileSize * length);
}
function rrNorthLine(x, y) {
	rDrawHorizontalLine(x * rrTileSize, (y + 1) * rrTileSize - 1, rrTileSize);
}
function rrNorthLineBig(x, y, length) {
	rDrawHorizontalLine(x * rrTileSize, (y + 1) * rrTileSize - 1, rrTileSize * length);
}
function rrCone(x, y) {
	rDrawCone(x * rrTileSize, y * rrTileSize, rrTileSize);
}
function rrFillItem(x, y) {
	let padding = rrTileSize >>> 2;
	let size = rrTileSize - 2 * padding;
	rDrawFilledRect(x * rrTileSize + padding, y * rrTileSize + padding, size, size);
}
var rrTileSize;
//}
//{ Renderer - r
function rInit(canvas, width, height) {
	rr.Canvas = canvas;
	rr.Context = canvas.getContext("2d");
	rResizeCanvas(width, height);
	rSetDrawColor(255, 255, 255, 255);
}
function rResizeCanvas(width, height) {
	rr.Canvas.width = width;
	rr.Canvas.height = height;
	rr.CanvasWidth = width;
	rr.CanvasHeight = height;
	rr.CanvasYFixOffset = (rr.CanvasHeight - 1) * rr.CanvasWidth;
	rr.ImageData = rr.Context.createImageData(width, height);
	rr.Pixels = new ArrayBuffer(rr.ImageData.data.length);
	rr.Pixels8 = new Uint8ClampedArray(rr.Pixels);
	rr.Pixels32 = new Uint32Array(rr.Pixels);
}
function rSetDrawColor(r, g, b, a) {
	rr.DrawColorRB = r | (b << 16);
	rr.DrawColorG = rPIXEL_ALPHA | (g << 8);
	rr.DrawColor = rr.DrawColorRB | rr.DrawColorG;
	rr.DrawColorA = a + 1;
}
function rClear() {
	let endI = rr.Pixels32.length;
	for (let i = 0; i < endI; ++i) {
		rr.Pixels32[i] = rr.DrawColor;
	}
}
function rPresent() {
	rr.ImageData.data.set(rr.Pixels8);
	rr.Context.putImageData(rr.ImageData, 0, 0);
}
function rDrawPixel(i) {
	let color = rr.Pixels32[i];
	let oldRB = color & 0xFF00FF;
	let oldAG = color & 0xFF00FF00;
	let rb = oldRB + (rr.DrawColorA * (rr.DrawColorRB - oldRB) >> 8) & 0xFF00FF;
	let g = oldAG + (rr.DrawColorA * (rr.DrawColorG - oldAG) >> 8) & 0xFF00FF00;
	rr.Pixels32[i] = rb | g;
}
function rDrawHorizontalLine(x, y, length) {
	let i = rXYToI(x, y)
	let endI = i + length;
	for (; i < endI; ++i) {
		rDrawPixel(i);
	}
}
function rDrawVerticalLine(x, y, length) {
	let i = rXYToI(x, y);
	let endI = i - length * rr.CanvasWidth;
	for (; i > endI; i -= rr.CanvasWidth) {
		rDrawPixel(i);
	}
}
function rSetFilledRect(x, y, width, height) {
	let i = rXYToI(x, y);
	let rowDelta = width + rr.CanvasWidth;
	let endYI = i - height * rr.CanvasWidth;
	while (i > endYI) {
		let endXI = i + width;
		for (; i < endXI; ++i) {
			rr.Pixels32[i] = rr.DrawColor;
		}
		i -= rowDelta;
	}
}
function rDrawFilledRect(x, y, width, height) {
	let i = rXYToI(x, y);
	let rowDelta = width + rr.CanvasWidth;
	let endYI = i - height * rr.CanvasWidth;
	while (i > endYI) {
		let endXI = i + width;
		for (; i < endXI; ++i) {
			rDrawPixel(i);
		}
		i -= rowDelta;
	}
}
function rDrawOutlinedRect(x, y, width, height) {
	rDrawHorizontalLine(x, y, width);
	rDrawHorizontalLine(x, y + height - 1, width);
	rDrawVerticalLine(x, y + 1, height - 2);
	rDrawVerticalLine(x + width - 1, y + 1, height - 2);
}
function rDrawCone(x, y, width) { // Not optimised to use i yet
	let lastX = x + width - 1;
	let endI = (width >>> 1) + (width & 1);
	for (let i = 0; i < endI; ++i) {
		rDrawPixel(rXYToI(x + i, y));
		rDrawPixel(rXYToI(lastX - i, y));
		++y;
	}
}
function rXYToI(x, y) {
	return rr.CanvasYFixOffset + x - y * rr.CanvasWidth;
}
var rr = {
	Canvas: undefined,
	CanvasWidth: undefined,
	CanvasHeight: undefined,
	CanvasYFixOffset: undefined,
	Context: undefined,
	ImageData: undefined,
	Pixels: undefined,
	Pixels8: undefined,
	Pixels32: undefined,
	DrawColor: undefined,
	DrawColorRB: undefined,
	DrawColorG: undefined,
	DrawColorA: undefined
}
//}

/* save, load code*/
// populate dummy instance with saved values
Object.prototype.update = function (obj) {
	Object.keys(obj).forEach((key) => {
		this[key] = obj[key];
	});
	return this;
}

function buildSaveState() {
	const state = {};

	// npc stuff
	state.ba = structuredClone(ba);

	// player stuff
	state.pl = structuredClone(pl);

	// map stuff
	// TODO: Probably don't need to clone `m.mCurrentMap` and instead just track
	// whether it's the 1-9 or 10 map. Can save a lot of memory not cloning the map
	// image if memory usage/performance becomes an issue.
	state.m = structuredClone(m);

	// all the other things
	state.sim = {};
	Object.keys(sim).forEach(key => {
		let simObj = sim[key];
		if (simObj instanceof HTMLElement) {
			state.sim[key] = simObj;
		} else {
			state.sim[key] = structuredClone(simObj);
		}
	});
	state.sim.WaveVal = sim.WaveSelect.value;
	state.sim.LevelVal = sim.DefLevelSelect.value;

	return state;
}

function simSaveStateOnClick() {
	console.log("Saving state...");
	if (!sim.IsPaused)
		sim.PauseResumeButton.click();
	window.state = buildSaveState();
}

function loadSaveState(state) {
	if (Object.keys(state).length === 0) {
		return;
	}
	console.log("Loading state...");

	sim.DefLevelSelect.value = state["sim"].LevelVal;
	simDefLevelSelectOnChange();
	sim.WaveSelect.value = state["sim"].WaveVal;
	simWaveSelectOnChange();

	ba = structuredClone(state["ba"]);
	pl = structuredClone(state["pl"]);
	m.mItemZones = structuredClone(state["m"].mItemZones);
	sim.update(state["sim"]);

	ba.Healers = [];
	state["ba"].Healers.forEach(healer => {
		let tmpH = new heHealer();
		tmpH.update(healer);
		ba.Healers.push(tmpH);
	});

	ba.Runners = []
	state["ba"].Runners.forEach(runner => {
		let tmpR = new ruRunner();
		let tmpRNG = new rngRunnerRNG();
		tmpR.update(runner);
		tmpRNG.update(runner.runnerRNG);
		tmpR.runnerRNG = tmpRNG;
		tmpR.foodTarget = structuredClone(runner.foodTarget);
		ba.Runners.push(tmpR);
	});
	simMovementsInputWatcher()

	// html
	sim.TickCountSpan.innerHTML = ba.TickCounter;
	sim.ToggleHealers.checked = sim.EnableHealers;
	simSetRunning(true);
	simSetPause(true);
	simEnableRenderOnChange();
	simDraw();

	sim.MarkerMode = document.getElementById(HTML_ENABLE_MARKER).checked;
}

function simLoadStateOnClick() {
	loadSaveState(window.state);
}
